[Actions]
; common Values for (de)installation
include_insert "common.opsiinc"

if not(HasMinimumSpace ("%SystemDrive%", $MinimumSpace$))
   LogError "Not enough space on %SystemDrive%, " + $MinimumSpace$ + " on drive %SystemDrive% needed for " + $ProductId$
   isFatalError "No Space"
   ; Stop process and set installation status to failed
else
   	if FileExists("%ScriptPath%\delsub.opsiscript")
   		comment "Start uninstall sub section"
    	Sub "%ScriptPath%\delsub.opsiscript"
    endif

	Message "Installing %installingProdName% (%installingProdVersion%)..."   
	comment "Start setup program"

   	Winbatch_install_msi
	Set $ExitCode$ = getLastExitCode
	if stringToBool(isMsiExitcodeFatal($ExitCode$, "True", $ErrorString$))
		isFatalError
	endif

	comment "Testing for installation success"
	if FileExists($PathToExe$)
		; Verifies if product version number matches installed version number
		set $FileInfoList$ = getFileInfoMap($PathToExe$)
		set $InstalledVersion$ = getValue("file version with dots", $FileInfoList$)
		; executable file version consistently has an extra zero digit at the end, therefore substring comparison
		if not (contains($InstalledVersion$, $ProductVersion$))
			logError "Fatal: Installed product version is " + $InstalledVersion$ + " but is supposed to be " + $ProductVersion$
			isFatalError
		endif

		; MSI legt defaultmäßig einen Link an, ggf. löschen
		if $DesktopLink$ = "false"
    		LinkFolder_delete_desktoplink
    	endif

		comment "include custom post install file"
		set $CustomPostInstall$ = getProductProperty("custom-post-install","none")
		if not ($CustomPostInstall$ = "none")
			if FileExists("%ScriptPath%\custom\" + $CustomPostInstall$)
	  			include_insert "%ScriptPath%\custom\" + $CustomPostInstall$
	  		endif
	  	endif
	  	
	  	; Konfiguration und Language-File kopieren
	  	Files_install_config

		; Soll die Sprache geändert werden?
	  	Set $DefaultLanguage$ = GetProductProperty("default-language", "auto")	  	
	  	if $DefaultLanguage$ = "auto"
			Set $LanguageMap$ = GetLocaleInfoMap
			Set $SystemLanguage$ = lower(getValue("system_default_language_id", $LanguageMap$))
			if $SystemLanguage$ = "0407"
				Set $LanguageFile$ = "German.lngx"				
			endif
		endif
		if $DefaultLanguage$ = "de" 
			Set $LanguageFile$ = "German.lngx"
		endif
		if not ($LanguageFile$ = "")
			XMLPatch_set-languagefile $InstallDir$ + "\KeePass.config.xml"
		endif
		
		; update-check gewünscht?
		Set $UpdateCheck$ = GetProductProperty("update-check", "false")
		if $UpdateCheck$ = "true"
			XMLPatch_set-update-check $InstallDir$ + "\KeePass.config.xml"
		endif
	else
		logError "Could not found " + $PathToExe$ + "after installation"
		isFatalError
	endif
endif

[Winbatch_install_msi]
msiexec $SilentOption$ /i "%ScriptPath%\$InstFile$" /l* "$LogDir$\$ProductId$.install_log.txt" ALLUSERS=1 REBOOT=ReallySuppress

[Files_install_config]
copy "%ScriptPath%\files\KeePass.config.xml" "$InstallDir$"
; ab Version 2.38 müssen Language-Files in ein Verzeichnis "Languages"
copy "%ScriptPath%\files\*.lngx" "$InstallDir$\Languages"

[XMLPatch_set-languagefile]
openNodeSet 'Application /LanguageFile'
SetText "$LanguageFile$"

[XMLPatch_set-update-check]
openNodeSet 'Application /Start /CheckForUpdate'
; habs auch mit $UpdateCheck$ versucht, aber dort ist "True"! XML mag aber "true" ;-)
SetText "true"

[LinkFolder_create_desktoplink]
; create an shortcut to the installed exe on AllUsers desktop:
set_basefolder common_desktopdirectory
set_subfolder ""
set_link
       name: $ProductName$
       target: $PathToExe$
end_link

[Linkfolder_delete_desktoplink]
set_basefolder common_desktopdirectory
set_subfolder ""
delete_element $ProductName$